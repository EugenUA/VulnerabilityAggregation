package dao.SQLiteWorkingPackage;

import dao.DAOException;
import dao.db.SQLiteSingletonConnection;
import dao.interfaces.VulnerabilityDAO;
import entities.dbEntities.Vulnerability;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class SQLiteVulnerabilityDAO implements VulnerabilityDAO {

    private static final Logger logger = LogManager.getLogger(SQLiteVulnerabilityDAO.class);
    private Connection con = null;

    public SQLiteVulnerabilityDAO() throws DAOException {
        con = SQLiteSingletonConnection.getConnection();
        //logger.debug("Successfully connected to the database");
    }

    public Vulnerability createVulnerability(Vulnerability vulnerability) throws DAOException{
        con = SQLiteSingletonConnection.reconnectIfConnectionToDatabaseLost();
        try{
            PreparedStatement stmt = con.prepareStatement("" +
                    "INSERT INTO Vulnerability(name,cve,cvss,source,source_type) VALUES (?,?,?,?,?)");
            stmt.setString(1, vulnerability.getName());
            stmt.setString(2, vulnerability.getCve());
            stmt.setString(3, vulnerability.getCvss());
            stmt.setString(4, vulnerability.getSource());
            stmt.setString(5, vulnerability.getSource_type().toString());
            stmt.executeUpdate();
            ResultSet rs = stmt.getGeneratedKeys();
            rs.next();
            vulnerability.setId(rs.getInt(1));
            con.commit();
            rs.close();
            stmt.close();
        } catch(SQLException e){
            logger.debug(e.getMessage());
            throw new DAOException(e.getMessage());
        }
        return vulnerability;
    }

}
