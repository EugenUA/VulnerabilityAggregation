package dao.SQLiteWorkingPackage;

import dao.DAOException;
import dao.db.SQLiteSingletonConnection;
import dao.interfaces.DescriptionDAO;
import entities.dbEntities.Description;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Created by Eugen on 13.09.2017.
 */
public class SQLiteDescriptionDAO implements DescriptionDAO {

    private final static Logger logger = LogManager.getLogger(SQLiteDescriptionDAO.class);
    private Connection con = null;

    public SQLiteDescriptionDAO() throws DAOException {
        con = SQLiteSingletonConnection.getConnection();
    }

    public Description createDescription(Description description) throws DAOException{
        con = SQLiteSingletonConnection.reconnectIfConnectionToDatabaseLost();
        try{
            PreparedStatement stmt = con.prepareStatement("" +
                    "INSERT INTO Description(vulnerability_id, release_date, severity_level, technical_description," +
                    "author, solution) VALUES (?,?,?,?,?,?)");
            stmt.setInt(1, description.getVulnerability_id());
            stmt.setString(2, description.getRelease_date());
            stmt.setString(3, description.getSeverity_level());
            stmt.setString(4, description.getTechnical_description());
            stmt.setString(5, description.getAuthor());
            stmt.setString(6, description.getSolution());
            stmt.executeUpdate();
            ResultSet rs = stmt.getGeneratedKeys();
            rs.next();
            description.setId(rs.getInt(1));
            con.commit();
            rs.close();
            stmt.close();
        } catch(SQLException e){
            logger.debug(e.getMessage());
            throw new DAOException(e.getMessage());
        }
        return description;
    }


}
