package ui;

import entities.dbEntities.User;
import entities.programEntities.Email;
import entities.programEntities.HTMLAlert;
import entities.programEntities.RSSAlert;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import service.vulnerabilities_sources.Email.FetchingIncomingEmail;
import service.Service;
import service.ServiceException;
import service.SimpleService;
import service.vulnerabilities_sources.RSSFeed.ParseRSSFeed;
import service.vulnerabilities_sources.RSSFeed.RSSFeedSources;
import service.vulnerabilities_sources.Website.HTMLSources;
import service.vulnerabilities_sources.Website.ParseHTML;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class Main {

    private static final Logger logger = LogManager.getLogger(Main.class);

    public static void main(String[] args) {
        try {
            BasicConfigurator.configure();
            Service service = new SimpleService();
            //logger.info("Application started!");

            boolean flag;
            do {
                flag = false;

                WelcomePage wPage = new WelcomePage(service);
                User user = wPage.welcome();

                //TODO: ADD AGGREGATION MODULES
                System.out.println("***");
                System.out.println("Please wait until the program receives all new security vulnerabilities have been posted since your last login.");
                System.out.println("It will take up to 5 minutes.");

                /* EMAIL */
                /* FOR TESTING PURPOSES: */
                FetchingIncomingEmail fetchEmail = new FetchingIncomingEmail();
                fetchEmail.fetch();
                ArrayList<Email> emails = fetchEmail.getIncomingEmails();
                for(Email eachMail : emails){
                    System.out.println(eachMail);
                }
                System.out.println("Email checked!");
                /* END EMAILS PARSING */

                /* RSS-Feed */
                /* FOR TESTING PURPOSES: */
                ParseRSSFeed parseRSSFeed = new ParseRSSFeed(user.getLastLoginDate());
                RSSFeedSources rssFeedSources = new RSSFeedSources();
                rssFeedSources.addSource("https://www.us-cert.gov/ncas/alerts.xml"); //US-CERT
                rssFeedSources.addSource("https://tools.cisco.com/security/center/psirtrss20/CiscoSecurityAdvisory.xml"); //CISCO
                rssFeedSources.addSource("http://seclists.org/rss/bugtraq.rss");
                rssFeedSources.addSource("http://seclists.org/rss/nmap-dev.rss");

                parseRSSFeed.parseRSSSources(rssFeedSources.getSources());

                List<RSSAlert> rssAlerts = parseRSSFeed.getAlerts();
                for(RSSAlert rssAlert : rssAlerts){
                    System.out.println(rssAlert);
                }
                System.out.println("RSS-feeds checked!");
                /* END RSS FEED PARSING */

                /* WEBPAGE */
                /* FOR TESTING PURPOSES */
                ParseHTML parseHTML = new ParseHTML(user.getLastLoginDate());
                HTMLSources htmlSources = new HTMLSources();
                htmlSources.addHTMLSource("https://www.freebsd.org/security/advisories.html");

                parseHTML.parseHTMLSources(htmlSources.getHTMLSources());

                System.out.println("Web pages checked!");

                List<HTMLAlert> htmlAlerts = parseHTML.getAlerts();
                for(HTMLAlert htmlAlert : htmlAlerts){
                    System.out.println(htmlAlert);
                }
                /* END WEB PAGE PARSING */

                System.out.println("***");

                if (user != null) {
                    UserCabinet userCabinet = new UserCabinet(user, service);
                    userCabinet.enterUserCabinet();

                    if (user.getIsDeleted()) {
                        flag = true;
                    }
                }
            }while(flag);

        } catch(ServiceException e){
            logger.fatal(e.getMessage());
        }
    }

}
