package service.vulnerabilities_sources.Website;

import entities.programEntities.HTMLAlert;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import service.ServiceException;
import service.StringDatesComparator;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


public class ParseHTML {

    private static final Logger logger = LogManager.getLogger(ParseHTML.class);
    private List<HTMLAlert> htmlAlerts = new ArrayList<HTMLAlert>();
    private String lastLoginDate;
    private StringDatesComparator datesComparator = new StringDatesComparator();


    public ParseHTML(String lastLoginDate){
        this.lastLoginDate = lastLoginDate;
    }

    public List<HTMLAlert> getAlerts(){
        return this.htmlAlerts;
    }

    public void parseHTMLSources(List<String> sources) throws ServiceException {
        for(String eachSource : sources){
            readHTML(eachSource);
        }
    }

    private void readHTML(String source) throws ServiceException {
        if (source.contains("freebsd")) {
            try {
                Document doc = Jsoup.connect(source)
                        .timeout(10000).validateTLSCertificates(false).get();
                Elements newsHeadlines = doc.select("#mp-itn b a");

                Elements elements = doc.select("a[href*=//security.FreeBSD.org/advisories/FreeBSD-SA]");

                for (Element elem : elements) {
                    String link = elem.attr("abs:href");

                    Document alertDocument = Jsoup.connect(link).timeout(10000)
                            .validateTLSCertificates(false).get();
                    Element alert = alertDocument.body();
                    if(!alert.text().contains("REVISED")) {
                        HTMLAlert htmlAlert = parse_pgp_signed_message(alert.text());

                        if(datesComparator.date_is_today(this.lastLoginDate)){
                            htmlAlert.setOrigin("FreeBSD");
                            htmlAlert.setLink(link);

                            htmlAlerts.add(htmlAlert);
                            if(htmlAlerts.size() >= 10){
                                break;
                            }
                            continue;
                        }

                        if(datesComparator.date1_less_than_date2(this.lastLoginDate, htmlAlert.getPubDate())){
                            htmlAlert.setOrigin("FreeBSD");
                            htmlAlert.setLink(link);

                            htmlAlerts.add(htmlAlert);
                        } else {
                            break;
                        }
                    }
                }
            } catch (IOException e) {
                logger.debug(e.getMessage());
                throw new ServiceException(e.getMessage());
            }
        }
    }


    /* Used for FreeBSD */
    private HTMLAlert parse_pgp_signed_message(String message){
        HTMLAlert resultAlert = new HTMLAlert();
        /* Delete everything after Solution */
        // Deletion begins with "VI.   Correction details
        String result = message.substring(0, message.indexOf("VI"));

        /* Get title */
        if(result.contains("Topic") && result.contains("Category")) {
            String title = result.substring(result.indexOf("Topic: ") + "Topic: ".length(), result.indexOf("Category"));
            resultAlert.setTitle(title);
        }

        /* Get pubDate */
        if(result.contains("Announced")) {
            String pubDate = result.substring(result.indexOf("Announced: ") + "Announced: ".length(),
                    result.indexOf("Announced: ") + "Announced: ".length() + 10);
            resultAlert.setPubDate(pubDate);
        }

        /* Get Description */
        if(result.contains("CVE")) {
            String description = result.substring(result.indexOf("CVE"));
            resultAlert.setDescription(description);
        } else if (result.contains("Background")) {
            String description = result.substring(result.indexOf("Background"));
            resultAlert.setDescription(description);
        }
        return resultAlert;
    }

}
