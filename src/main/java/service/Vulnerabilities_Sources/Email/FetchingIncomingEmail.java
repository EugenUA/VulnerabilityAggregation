package service.vulnerabilities_sources.Email;


import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import service.*;

import javax.mail.*;
import java.io.*;
import java.util.Date;
import java.util.Properties;

public class FetchingIncomingEmail {

    private static final Logger logger = LogManager.getLogger(FetchingIncomingEmail.class);

    public void fetch() throws ServiceException{
            String host = "pop.gmail.com";
            String storeType = "pop3";
            String user = "vulnerabilities.aggregation@gmail.com";
            String password = "1qayxsw23edc";

        try {
            // create properties field
            Properties properties = new Properties();
            properties.put("mail.store.protocol", "pop3s");
            properties.put("mail.pop3s.host", host);
            properties.put("mail.pop3s.port", "995");
            properties.put("mail.pop3s.starttls.enable", "true");
            properties.put("mail.pop3s.ssl.trust", host);
            Session emailSession = Session.getDefaultInstance(properties);
            //emailSession.setDebug(true);

            // create the POP3 store object and connect with the pop server
            Store store = emailSession.getStore("pop3s");

            store.connect(host, user, password);

            // create the folder object and open it
            Folder emailFolder = store.getFolder("INBOX");
            emailFolder.open(Folder.READ_ONLY);

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    System.in));

            // retrieve the messages from the folder in an array and print it
            Message[] messages = emailFolder.getMessages();
            //System.out.println("messages.length---" + messages.length);

            for (int i = 0; i < messages.length; i++) {
                Message message = messages[i];
                System.out.println("---------------------------------");
                writePart(message);
            }

            // close the store and folder objects
            emailFolder.close(false);
            store.close();
        } catch(MessagingException e) {
            logger.debug(e.getMessage());
            throw new ServiceException(e.getMessage());
        } catch(IOException e){
            logger.debug(e.getMessage());
            throw new ServiceException(e.getMessage());
        } catch(Exception e){
            logger.debug(e.getMessage());
            throw new ServiceException(e.getMessage());
        }
    }

    /*
  * This method checks for content-type
  * based on which, it processes and
  * fetches the content of the message
  */
    public static void writePart(Part p) throws Exception {
        if (p instanceof Message)
            //Call methos writeEnvelope
            writeEnvelope((Message) p);

        //check if the content is plain text
        if (p.isMimeType("text/plain")) {
            System.out.println((String) p.getContent());
        }
        //check if the content has attachment
        else if (p.isMimeType("multipart/*")) {
            Multipart mp = (Multipart) p.getContent();
            int count = mp.getCount();
            for (int i = 0; i < count; i++)
                writePart(mp.getBodyPart(i));
        }
        //check if the content is a nested message
        else if (p.isMimeType("message/rfc822")) {
            writePart((Part) p.getContent());
        }
        else if (p.getContentType().contains("image/")) {
            System.out.println("content type" + p.getContentType());
            File f = new File("image" + new Date().getTime() + ".jpg");
            DataOutputStream output = new DataOutputStream(
                    new BufferedOutputStream(new FileOutputStream(f)));
            com.sun.mail.util.BASE64DecoderStream test =
                    (com.sun.mail.util.BASE64DecoderStream) p
                            .getContent();
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = test.read(buffer)) != -1) {
                output.write(buffer, 0, bytesRead);
            }
        }
        else {
            Object o = p.getContent();
            if (o instanceof String) {
                System.out.println((String) o);
            }
            else if (o instanceof InputStream) {
                InputStream is = (InputStream) o;
                is = (InputStream) o;
                int c;
                while ((c = is.read()) != -1)
                    System.out.write(c);
            }
            else {
                System.out.println(o.toString());
            }
        }

    }

    /*
   * This method would print FROM,TO and SUBJECT of the message
   */
    public static void writeEnvelope(Message m) throws Exception {
        System.out.println("This is the message envelope");
        System.out.println("---------------------------");
        Address[] a;

        // FROM
        if ((a = m.getFrom()) != null) {
            for (int j = 0; j < a.length; j++)
                System.out.println("FROM: " + a[j].toString());
        }

        // TO
        if ((a = m.getRecipients(Message.RecipientType.TO)) != null) {
            for (int j = 0; j < a.length; j++)
                System.out.println("TO: " + a[j].toString());
        }

        // SUBJECT
        if (m.getSubject() != null)
            System.out.println("SUBJECT: " + m.getSubject());

    }
}
