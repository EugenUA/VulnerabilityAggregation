package service;

import dao.DAOException;
import dao.SQLiteUserDAO;
import dao.UserDAO;
import entities.dbEntities.User;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

/**
 * Created by Eugen on 22.08.2017.
 */
public class SimpleService implements Service {

    private static final Logger logger = LogManager.getLogger(SimpleService.class);
    private UserDAO userDAO;

    public SimpleService() throws ServiceException{
        try{
            this.userDAO = new SQLiteUserDAO();
        } catch(DAOException e){
            throw new ServiceException(e.getMessage());
        }
        //logger.info("Service started");
    }

    public User createUser(User user) throws ServiceException{
        //logger.debug("Entering create user method");
        try{
            return userDAO.create(user);
        } catch(DAOException e){
            throw new ServiceException(e.getMessage());
        }
    }

    public User selectUser(String name, String password) throws ServiceException{
        //logger.debug("Entering select user method");
        try{
            return userDAO.selectUser(name, password);
        } catch(DAOException e){
            throw new ServiceException(e.getMessage());
        }
    }

    public User updateName(User user, String name) throws ServiceException{
        try{
            return userDAO.updateName(user, name);
        } catch(DAOException e){
            throw new ServiceException(e.getMessage());
        }
    }

    public User updateEmail(User user, String email) throws ServiceException{
        try{
            return userDAO.updateEmail(user, email);
        } catch(DAOException e){
            throw new ServiceException(e.getMessage());
        }
    }

    public User updatePassword(User user, String password) throws ServiceException{
        try{
            return userDAO.updatePassword(user, password);
        } catch(DAOException e){
            throw new ServiceException(e.getMessage());
        }
    }

    public User deleteAccount(User user) throws ServiceException{
        try{
            return userDAO.deleteAccount(user);
        } catch(DAOException e){
            throw new ServiceException(e.getMessage());
        }
    }

    public User ifUserIsUnique(User inputUser) throws ServiceException{
        try{
            return userDAO.ifUserIsUnique(inputUser);
        } catch(DAOException e){
            throw new ServiceException(e.getMessage());
        }
    }

}
