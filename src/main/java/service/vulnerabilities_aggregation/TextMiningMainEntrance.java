package service.vulnerabilities_aggregation;

import entities.dbEntities.User;
import entities.programEntities.Email;
import entities.programEntities.HTMLAlert;
import entities.programEntities.RSSAlert;
import service.ServiceException;
import service.vulnerabilities_sources.Email.FetchingIncomingEmail;
import service.vulnerabilities_sources.RSSFeed.ParseRSSFeed;
import service.vulnerabilities_sources.RSSFeed.RSSFeedSources;
import service.vulnerabilities_sources.Website.HTMLSources;
import service.vulnerabilities_sources.Website.ParseHTML;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Eugen on 10.09.2017.
 */
public class TextMiningMainEntrance {

    /* Sources of security alerts storage */
    private RSSFeedSources rssFeedSources;
    private HTMLSources htmlSources;

    /* Aggregated information storage */
    private ArrayList<Email> receivedEmails;
    private ArrayList<RSSAlert> receivedRSSFeeds;
    private ArrayList<HTMLAlert> receivedHTMLAlerts;

    private User user;

    public TextMiningMainEntrance(User user){
        this.user = user;
        receivedEmails = new ArrayList<Email>();
        receivedRSSFeeds = new ArrayList<RSSAlert>();
        receivedHTMLAlerts = new ArrayList<HTMLAlert>();

        rssFeedSources = new RSSFeedSources();
        rssFeedSources.addSource("https://www.us-cert.gov/ncas/alerts.xml"); //US-CERT
        rssFeedSources.addSource("https://tools.cisco.com/security/center/psirtrss20/CiscoSecurityAdvisory.xml"); //CISCO
        rssFeedSources.addSource("http://seclists.org/rss/bugtraq.rss");  //BugTraq
        rssFeedSources.addSource("http://seclists.org/rss/nmap-dev.rss"); //Nmap-Dev

        htmlSources = new HTMLSources();
        htmlSources.addHTMLSource("https://www.freebsd.org/security/advisories.html");   //FreeBSD
        htmlSources.addHTMLSource("https://secuniaresearch.flexerasoftware.com/community/research/");  //SECUNIA
    }

    public void aggregateSecurityAlerts(){

        /* AGGREGATION PROCEDURE */

        System.out.println("*********************************");
        System.out.println("ATTENTION!");
        System.out.println("Security advisories aggregation procedure started!");
        System.out.println("It can take up to 3 minutes");

        receivedEmails = aggregateSecurityAlertsIncomingFromEmail();
        receivedRSSFeeds = aggregateSecurityAlertsIncomingFromRSSFeeds();
        receivedHTMLAlerts = aggregateSecurityAlertsIncomingFromHTMLWebPages();

        System.out.println("Aggregation procedure successfully completed!");
        System.out.println("*********************************");
        System.out.println();
    }

    private ArrayList<Email> aggregateSecurityAlertsIncomingFromEmail(){
        /* EMAIL */
        try {
            FetchingIncomingEmail fetchEmail = new FetchingIncomingEmail();
            fetchEmail.fetch();
            ArrayList<Email> emails = fetchEmail.getIncomingEmails();
            System.out.println("Email checked!");
            return emails;
        } catch(ServiceException e){
            System.out.println("Due to connection problems the email box cannot be checked!");
        }
        return null; // should not be reachable
        /* END EMAILS PARSING */
    }

    private ArrayList<RSSAlert> aggregateSecurityAlertsIncomingFromRSSFeeds(){
        /* RSS-Feed */
        try{
            ParseRSSFeed parseRSSFeed = new ParseRSSFeed(user.getLastLoginDate());

            parseRSSFeed.parseRSSSources(rssFeedSources.getSources());

            ArrayList<RSSAlert> rssAlerts = parseRSSFeed.getAlerts();
            System.out.println("RSS-feeds checked!");
            return rssAlerts;
        } catch(ServiceException e) {
            System.out.println("Due to connection problems the RSS-feeds cannot be checked!");
        }
        /* END RSS FEED PARSING */
        return null; // should not be reachable
    }

    private ArrayList<HTMLAlert> aggregateSecurityAlertsIncomingFromHTMLWebPages(){
        /* WEBPAGE */
        try {
            ParseHTML parseHTML = new ParseHTML(user.getLastLoginDate());

            parseHTML.parseHTMLSources(htmlSources.getHTMLSources());

            ArrayList<HTMLAlert> htmlAlerts = parseHTML.getAlerts();
            System.out.println("Web pages checked!");
            return htmlAlerts;
        } catch (ServiceException e){
            System.out.println("Due to connection problems the Web pages cannot be checked!");
        }
        /* END WEB PAGE PARSING */
        return null; // should never be reached
    }
}
