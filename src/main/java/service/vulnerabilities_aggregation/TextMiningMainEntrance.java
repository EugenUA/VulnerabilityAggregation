package service.vulnerabilities_aggregation;

import entities.dbEntities.User;
import entities.programEntities.Email;
import entities.programEntities.HTMLAlert;
import entities.programEntities.RSSAlert;
import entities.programEntities.miningEntities.PreprocessingEntity;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import service.ServiceException;
import service.vulnerabilities_aggregation.Classification.Classification;
import service.vulnerabilities_aggregation.Preprocessing.CreatingEntities.EmailsPreprocessing;
import service.vulnerabilities_aggregation.Preprocessing.CreatingEntities.HTMLPreprocessing;
import service.vulnerabilities_aggregation.Preprocessing.CreatingEntities.RSSPreprocessing;
import service.vulnerabilities_aggregation.Preprocessing.Preprocessing;
import service.vulnerabilities_sources.Email.FetchingIncomingEmail;
import service.vulnerabilities_sources.RSSFeed.ParseRSSFeed;
import service.vulnerabilities_sources.RSSFeed.RSSFeedSources;
import service.vulnerabilities_sources.Website.HTMLSources;
import service.vulnerabilities_sources.Website.ParseHTML;

import java.util.ArrayList;



public class TextMiningMainEntrance {

    private static final Logger logger = LogManager.getLogger(TextMiningMainEntrance.class);

    /* Sources of security alerts storage */
    private RSSFeedSources rssFeedSources;
    private HTMLSources htmlSources;

    /* Aggregated information storage */
    private ArrayList<Email> receivedEmails;
    private ArrayList<RSSAlert> receivedRSSFeeds;
    private ArrayList<HTMLAlert> receivedHTMLAlerts;

    private User user;

    public TextMiningMainEntrance(User user){
        this.user = user;
        receivedEmails = new ArrayList<Email>();
        receivedRSSFeeds = new ArrayList<RSSAlert>();
        receivedHTMLAlerts = new ArrayList<HTMLAlert>();

        rssFeedSources = new RSSFeedSources();
        rssFeedSources.addSource("https://www.us-cert.gov/ncas/alerts.xml"); //US-CERT
        rssFeedSources.addSource("https://tools.cisco.com/security/center/psirtrss20/CiscoSecurityAdvisory.xml"); //CISCO
        rssFeedSources.addSource("http://seclists.org/rss/bugtraq.rss");  //BugTraq

        htmlSources = new HTMLSources();
        htmlSources.addHTMLSource("https://www.freebsd.org/security/advisories.html");   //FreeBSD
        htmlSources.addHTMLSource("https://secuniaresearch.flexerasoftware.com/community/research/");  //SECUNIA
    }

    public void aggregateSecurityAlerts(){

        /* AGGREGATION PROCEDURE */

        System.out.println("*********************************");
        System.out.println("ATTENTION!");
        System.out.println("Security advisories aggregation and processing procedures started!");
        System.out.println("It can take up to 5 minutes");

        receivedEmails = aggregateSecurityAlertsIncomingFromEmail();
        receivedRSSFeeds = aggregateSecurityAlertsIncomingFromRSSFeeds();
        receivedHTMLAlerts = aggregateSecurityAlertsIncomingFromHTMLWebPages();

        System.out.println("Aggregation procedure successfully completed!");
        System.out.println("*********************************");
        System.out.println();

        /* TEXT MINING PROCEDURE */

        System.out.println("*********************************");
        System.out.println("ATTENTION!");
        System.out.println("Advisories analysis and storing of vulnerability information begins!");

        /* PREPROCESSING */

        EmailsPreprocessing emailsPreprocessing = new EmailsPreprocessing(receivedEmails);
        RSSPreprocessing rssPreprocessing = new RSSPreprocessing(receivedRSSFeeds);
        HTMLPreprocessing htmlPreprocessing = new HTMLPreprocessing(receivedHTMLAlerts);

        emailsPreprocessing.createEmailEntitiesForPreprocessing();
        rssPreprocessing.createRSSFeedEntitiesPreprocessing();
        htmlPreprocessing.createHTMLPreprocessingEntities();

        ArrayList<PreprocessingEntity> preprocessingEntities = new ArrayList<PreprocessingEntity>();
        preprocessingEntities.addAll(emailsPreprocessing.getPreprocessingEntities());
        preprocessingEntities.addAll(rssPreprocessing.getPreprocessingEntities());
        preprocessingEntities.addAll(htmlPreprocessing.getPreprocessingEntities());


        if(preprocessingEntities.size() > 0) {

            Preprocessing preprocessing = new Preprocessing(preprocessingEntities);
            preprocessing.conductPreprocessingStep();

            /* CLASSIFICATION */
            Classification classification = new Classification(preprocessing.getPreprocessingEntities());

            /* CLUSTERING */

        }

        /* END OF TEXT MINING PROCEDURE */
    }

    private ArrayList<Email> aggregateSecurityAlertsIncomingFromEmail(){
        /* EMAIL */
        try {
            FetchingIncomingEmail fetchEmail = new FetchingIncomingEmail();
            fetchEmail.fetch();
            ArrayList<Email> emails = fetchEmail.getIncomingEmails();
            System.out.println("Email checked! " + "Number of received advisories: " + emails.size() );

            // Print Emails
           /* for(Email email : emails){
                System.out.println(email);
            }*/

            return emails;
        } catch(ServiceException e){
            System.out.println("Due to connection problems the email box cannot be checked!");
        }
        return null; // should not be reachable
        /* END EMAILS PARSING */
    }

    private ArrayList<RSSAlert> aggregateSecurityAlertsIncomingFromRSSFeeds(){
        /* RSS-Feed */
        try{
            ParseRSSFeed parseRSSFeed = new ParseRSSFeed(user.getLastLoginDate());

            parseRSSFeed.parseRSSSources(rssFeedSources.getSources());

            ArrayList<RSSAlert> rssAlerts = parseRSSFeed.getAlerts();

           /* for(RSSAlert alert : rssAlerts){
                System.out.println("--------------------------------------------");
                System.out.println(alert);
                System.out.println("---------------------------------------------");
            }*/

            System.out.println("RSS-feeds checked! " + "Number of received advisories: " + rssAlerts.size());
            return rssAlerts;
        } catch(ServiceException e) {
            System.out.println("Due to connection problems the RSS-feeds cannot be checked!");
        }
        /* END RSS FEED PARSING */
        return null; // should not be reachable
    }

    private ArrayList<HTMLAlert> aggregateSecurityAlertsIncomingFromHTMLWebPages(){
        /* WEBPAGE */
        try {
            ParseHTML parseHTML = new ParseHTML(user.getLastLoginDate());

            parseHTML.parseHTMLSources(htmlSources.getHTMLSources());

            ArrayList<HTMLAlert> htmlAlerts = parseHTML.getAlerts();

           /* for(HTMLAlert alert : htmlAlerts){
                System.out.println("--------------------------------------------");
                System.out.println(alert);
                System.out.println("---------------------------------------------");
            } */

            System.out.println("Web pages checked! " + "Number of received advisories: " + htmlAlerts.size());
            return htmlAlerts;
        } catch (ServiceException e){
            System.out.println("Due to connection problems the Web pages cannot be checked!");
        }
        /* END WEB PAGE PARSING */
        return null; // should never be reached
    }
}
