package service.vulnerabilities_aggregation.Preprocessing;

import entities.programEntities.SingleFormatAdvisory;
import opennlp.tools.sentdetect.SentenceDetectorME;
import opennlp.tools.sentdetect.SentenceModel;
import service.ServiceException;

import opennlp.tools.tokenize.Tokenizer;
import opennlp.tools.tokenize.WhitespaceTokenizer;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * Created by Eugen on 20.09.2017.
 */
public abstract class Preprocessing {

    private ArrayList<SingleFormatAdvisory> singleFormatAdvisories = new ArrayList<SingleFormatAdvisory>();
    private Set<String> titleWords = new HashSet<String>(Arrays.asList("Synopsis", "Background", "Affected packages",
            "Description", "Technical Description", "Impact", "Workaround", "Resolution", "References", "Reference",
            "Availability", "Concerned?", "Concerned", "Licence", "Advisory link", "Vendor"));

    public void mainPreprocessing() throws ServiceException{};

    public String textCleaning(String text){

        String returnLine = null;
        String returnText = "";
        boolean flag = false;

        /* DELETING OF SEPARATION LINES */

        String lines[] = text.split("\\r?\\n");
        for(String line: lines) {
            Tokenizer tokenizer = WhitespaceTokenizer.INSTANCE;
            String tokens[] = tokenizer.tokenize(line);

            for (int i = 0; i < tokens.length; i++) {
                if (!(tokens[i].startsWith("-") || tokens[i].startsWith("="))) {
                    if(returnLine == null) {
                        returnLine = tokens[i];
                    } else {
                        returnLine += " " + tokens[i];
                    }
                    if(titleWords.contains(returnLine)){
                        returnLine = "\n" + returnLine + ": ";
                        flag = true;
                        break;
                    }
                }
            }
            if(returnLine != null) {
                if(returnLine.contains(":") && !flag) {
                    returnText += returnLine + "\n";
                } else {
                    returnText += " " + returnLine;
                }
            }
            returnLine = null;
        }
        System.out.println(returnText);
        return returnText;
    }
}
