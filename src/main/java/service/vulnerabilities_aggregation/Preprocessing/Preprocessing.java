package service.vulnerabilities_aggregation.Preprocessing;

import com.github.chen0040.data.text.TextFilter;
import com.github.chen0040.data.text.PorterStemmer;
import com.github.chen0040.data.text.StopWordRemoval;
import entities.programEntities.miningEntities.PreprocessingEntity;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import sun.font.TrueTypeFont;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;

public class Preprocessing {

    private static final Logger logger = LogManager.getLogger(Preprocessing.class);
    private ArrayList<PreprocessingEntity> preprocessingEntities;

    public Preprocessing(ArrayList<PreprocessingEntity> preprocessingEntities){
        this.preprocessingEntities = preprocessingEntities;
    }

    public ArrayList<PreprocessingEntity> getPreprocessingEntities(){
        return this.preprocessingEntities;
    }

    public void conductPreprocessingStep(){
        System.out.println("Beginning of the preprocessing step");
        System.out.println("Number of advisories to preprocess: " + this.preprocessingEntities.size());

        StopWordRemoval stopWordRemoval = new StopWordRemoval();
        stopWordRemoval.setRemoveXmlTag(true);

        TextFilter stemmer = new PorterStemmer();


        /* TOKENIZER & remove non-letter characters (punctuation and numbers) & fold input text to lower case*/
        for(PreprocessingEntity entity : this.preprocessingEntities){
            entity.setPreprocessedShortDescription(Arrays.asList(
                    entity.getShortDescription().replaceAll("[^a-zA-Z ]", "").toLowerCase().split("\\s+")));
            entity.setPreprocessedLongDescription(Arrays.asList(
                    entity.getLongDescription().replaceAll("[^a-zA-Z ]", "").toLowerCase().split("\\s+")));
        }

        /* STOP WORDS REMOVAL */
        for(PreprocessingEntity entity : this.preprocessingEntities){
            entity.setPreprocessedShortDescription(
                    stopWordRemoval.filter(entity.getPreprocessedShortDescription())
            );
            entity.setPreprocessedLongDescription(
                    stopWordRemoval.filter(entity.getPreprocessedLongDescription())
            );
        }

        /* STEMMING (Porter Stemmer)*/
        for(PreprocessingEntity entity : this.preprocessingEntities){
            entity.setPreprocessedShortDescription(
                    stemmer.filter(entity.getPreprocessedShortDescription())
            );
            entity.setPreprocessedLongDescription(
                    stemmer.filter(entity.getPreprocessedLongDescription())
            );
            //System.out.println(entity.getPreprocessedShortDescription());
        }
    }

}
