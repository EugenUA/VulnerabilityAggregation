package service.vulnerabilities_aggregation.Preprocessing;

import entities.dbEntities.sourceType;
import entities.programEntities.AggregationEntities.Email;
import entities.programEntities.SingleFormatAdvisory;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import service.ServiceException;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class EmailsPreprocessing extends Preprocessing {

    private final static Logger logger = LogManager.getLogger(EmailsPreprocessing.class);
    private ArrayList<Email> receivedEmails;
    private sourceType sourceType;

    public EmailsPreprocessing(ArrayList<Email> receivedEmails){
        this.receivedEmails = receivedEmails;
    }

    public void mainPreprocessing() throws ServiceException{
        System.out.println("--> Total of " + receivedEmails.size() + " emails received.");
        for(Email email : receivedEmails){
            if(email.getFrom().contains("gentoo") || email.getFrom().contains("Gentoo")){
                this.gentooInformationExtraction(email);
            }
            if(email.getFrom().contains("fulldisclosure")){
                this.fulldisclosureInformationExtraction(email);
            }
            if(email.getFrom().contains("vmware") || email.getFrom().contains("VVMware") ||
                    email.getFrom().contains("Vmware")){
                this.vmwareInfromationExtraction(email);
            }
        }
    }

    private void gentooInformationExtraction(Email email){

        SingleFormatAdvisory singleFormatAdvisory = new SingleFormatAdvisory();

        String workingEmail = textCleaning(email.getContent());

        String lines[] = workingEmail.split("\\r?\\n"); // split email by lines

        for(String line: lines){

            singleFormatAdvisory.setSource(email.getFrom());
            singleFormatAdvisory.setSource_type(sourceType.EMAIL);

            if(line.contains("Title: ") || line.contains("title: ")){
                singleFormatAdvisory.setTitle(line.substring(line.lastIndexOf("Title: ")+"Title: ".length()));
            }

            if(line.contains("CVE") || line.contains("cve")){
                String pattern = "CVE-[0-9]+-[0-9]+";
                Pattern p = Pattern.compile(pattern);
                Matcher m = p.matcher(line);
                while (m.find()) {
                    if(singleFormatAdvisory.getCVE() == null){
                        singleFormatAdvisory.setCVE("");
                    }
                    if(!singleFormatAdvisory.getCVE().contains(m.group())){
                        singleFormatAdvisory.setCVE(singleFormatAdvisory.getCVE() + m.group() + "; ");
                    }
                }
               // singleFormatAdvisory.setCVE(singleFormatAdvisory.getCVE().substring(0, singleFormatAdvisory.getCVE().length()-2));
            }


            if(line.contains("Date: ")){
                singleFormatAdvisory.setPublication_date(line.substring(line.lastIndexOf("Date: ") + "Date: ".length()));
            }

            if(line.contains("Severity: ")){
                singleFormatAdvisory.setSeverity_level(line.substring(line.lastIndexOf("Severity: ") + "Severity: ".length()));
            }

            if(line.contains("Description: ")){
                singleFormatAdvisory.setTechnical_description(line.substring(line.lastIndexOf("Description: ") + "Description: ".length()));
            }

            if(line.contains("Resolution: ")){
                singleFormatAdvisory.setSolution(line.substring(line.lastIndexOf("Resolution: ") + "Resolution: ".length()));
            }
        }

        /* TEST */
        System.out.println(singleFormatAdvisory.toString());
    }

    private void fulldisclosureInformationExtraction(Email email){

    }

    private void vmwareInfromationExtraction(Email email){

    }

    private boolean textDoesNotContainLetters(String text){
        if (Pattern.matches("[a-zA-Z]+", text) == false && text.length() > 2 && !text.contains(" ")) {
            return true;
        }
        return false;
    }

}
