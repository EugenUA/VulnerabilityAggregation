package service.vulnerabilities_aggregation.Clustering;

import entities.programEntities.miningEntities.Cluster;
import entities.programEntities.miningEntities.PreprocessingEntity;
import service.vulnerabilities_aggregation.Preprocessing.Preprocessing;

import java.util.ArrayList;
import java.util.List;

public class Clustering {

    private ArrayList<PreprocessingEntity> preprocessingEntities;
    private List<double[]> short_tfidfDocsVector = new ArrayList<double[]>();
    private List<double[]> long_tfidfDocsVector = new ArrayList<double[]>();

    private ArrayList<Cluster> clusters = new ArrayList<Cluster>();

    public Clustering(ArrayList<PreprocessingEntity> preprocessingEntities,
                      List<double[]> short_tf_idfDocsVector,
                      List<double[]> long_tf_idfDocsVector){

        this.preprocessingEntities = preprocessingEntities;
        this.short_tfidfDocsVector = short_tf_idfDocsVector;
        this.long_tfidfDocsVector = long_tf_idfDocsVector;
    }

    public void conductClustering(){

        /* Set each advisory in its own cluster */
        int i = 0;
        for(PreprocessingEntity entity : preprocessingEntities){
            Cluster cluster = new Cluster(i,entity,short_tfidfDocsVector.get(i),long_tfidfDocsVector.get(i));
            clusters.add(cluster);
            i++;
        }

    }


    public void getCosineSimilarity(List<double[]> tfidfDocsVector) {
        for (int i = 0; i < tfidfDocsVector.size(); i++)
        {
            for (int j = 0; j < tfidfDocsVector.size(); j++)
            {
                if(i!=j)
                    System.out.println("between " + i + " and " + j + "  =  "+ new CosineSimilarity().cosineSimilarity (
                            tfidfDocsVector.get(i),  tfidfDocsVector.get(j)));
            }
        }
    }

    public void getEuclideanDistance(List<double[]> tfidfDocsVector) {
        for (int i = 0; i < tfidfDocsVector.size(); i++)
        {
            for (int j = 0; j < tfidfDocsVector.size(); j++)
            {
                if(i!=j)
                    System.out.println("between " + i + " and " + j + "  =  "+ new EuclideanDistance().euclideanDistance(
                            tfidfDocsVector.get(i),  tfidfDocsVector.get(j)));
            }
        }
    }

}
