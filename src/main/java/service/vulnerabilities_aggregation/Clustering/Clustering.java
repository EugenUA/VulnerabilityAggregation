package service.vulnerabilities_aggregation.Clustering;

import entities.programEntities.miningEntities.Cluster;
import entities.programEntities.miningEntities.MaxSimilarity;
import entities.programEntities.miningEntities.PreprocessingEntity;

import java.util.ArrayList;
import java.util.List;

public class Clustering {

    private ArrayList<PreprocessingEntity> preprocessingEntities;
    private List<double[]> short_tfidfDocsVector = new ArrayList<double[]>();
    private List<double[]> long_tfidfDocsVector = new ArrayList<double[]>();

    private ArrayList<Cluster> clusters = new ArrayList<Cluster>();
    private double[][] distanceMatrix;

    public Clustering(ArrayList<PreprocessingEntity> preprocessingEntities,
                      List<double[]> short_tf_idfDocsVector,
                      List<double[]> long_tf_idfDocsVector){

        this.preprocessingEntities = preprocessingEntities;
        this.short_tfidfDocsVector = short_tf_idfDocsVector;
        this.long_tfidfDocsVector = long_tf_idfDocsVector;

        distanceMatrix = new double[preprocessingEntities.size()][preprocessingEntities.size()];
    }

    public void conductClustering(){

        /* Set each advisory in its own cluster */
        int k = 0;
        for(PreprocessingEntity entity : preprocessingEntities){
            Cluster cluster = new Cluster(k,entity,short_tfidfDocsVector.get(k),long_tfidfDocsVector.get(k));
            clusters.add(cluster);
            k++;
        }

        /* Fill in distance matrix */
        for(int i = 0; i < distanceMatrix.length; i++){
            for(int j = 0; j < distanceMatrix.length; j++){
                if(i > j){
                    distanceMatrix[i][j] = this.getCosineSimilarity(long_tfidfDocsVector.get(i),long_tfidfDocsVector.get(j));
                } else {
                    distanceMatrix[i][j] = 0;
                }
            }
        }

        /*TEST**/
        for(int i = 0; i < distanceMatrix.length; i++){
            for(int j = 0; j < distanceMatrix.length; j++) {
                System.out.print(distanceMatrix[i][j] + " ; ");
            }
            System.out.println();
        }

        boolean change;

    }


    public double getCosineSimilarity(double[] vector1, double[] vector2) {
        return new CosineSimilarity().cosineSimilarity(vector1,vector2);
    }

    public double getEuclideanDistance(double[] vector1, double[] vector2) {
        return new EuclideanDistance().euclideanDistance(vector1,vector2);
    }

}
